# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# general convenience
snippet . "expand '.' at any word boundary" w
		self.

snippet sa "assign own attribute"
		self.${1:attribute} = $1

snippet a "args" w
		*args

snippet kw "kwargs" w
		**kwargs

snippet akw "args and kwargs" w
		*args, **kwargs

snippet sp "assign own protected attribute"
		self._${1:attribute} = $1

snippet kwa "assign kwarg to kwarg"
		${1:foo}=$1,


snippet defi "initializer with docstrings" b
		def __init__(self, ${1:arg1}):
			`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
			write_function_docstring(t, snip) `
			${5:${VISUAL:pass}}


# writing tests
snippet sk "skip unittests" b
		@pytest.mark.skip(${1:skip_reason})

snippet test "add test method"
		def test_${1:description}(${2:`!v indent('.') ? 'self' : ''`}):
			${0}


# logging
snippet glog "import and createlogger"
		from sedimentum_utils.logging.logging import get_logger
		logger = get_logger(__name__)


snippet li "log info"
		logger.info("${0:msg}")

snippet lw "log warning"
		logger.warning("${0:msg}")

snippet le "log error"
		logger.error("${0:msg}")

snippet lx "log exception"
		logger.exception("${0:msg}")


# special imports
snippet np "numpy"
		import numpy as np

snippet plt "matplotlib"
		import matplotlib.pyplot as plt


# comprehensions
snippet lcp "list comprehension"
		[${1:item} for ${2:element} in ${3:collection}]${0}

snippet dcp "dict comprehension"
		{${1:key}: ${2:value} for ${3:element} in ${4:collection}}${0}

snippet scp "set comprehension"
		{${1:item} for ${2:element} in ${3:collection}${0}

